})
shinyServer(function(input, output) {
#----------------------------------------
#tab panel 1 - Home Plots
#preapare data for plot
output$case_overtime <- renderPlotly({
#determin the row index for subset
req(input$log_scale)
end_date_index <- which(date_choices == input$date)
#if log scale is not enabled, we will just use cases
if (input$log_scale == FALSE) {
#render plotly figure
case_fig <- plot_ly()
#add comfirmed case lines
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~as.numeric(aggre_cases[input$country,])[1:end_date_index],
line = list(color = 'rgba(67,67,67,1)', width = 2),
name = 'Confirmed Cases')
#add death line
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~as.numeric(aggre_death[input$country,])[1:end_date_index],
name = 'Death Toll')
#set the axis for the plot
case_fig <- case_fig %>%
layout(title = paste0(input$country,'\t','Trend'),
xaxis = list(title = 'Date',showgrid = FALSE),
yaxis = list(title = 'Comfirmed Cases/Deaths',showgrid=FALSE)
)
}
#if enable log scale, we need to take log of the y values
else{
#render plotly figure
case_fig <- plot_ly()
#add comfirmed case lines
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~log(as.numeric(aggre_cases[input$country,])[1:end_date_index]),
line = list(color = 'rgba(67,67,67,1)', width = 2),
name = 'Confirmed Cases')
#add death line
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~log(as.numeric(aggre_death[input$country,])[1:end_date_index]),
name = 'Death Toll')
#set the axis for the plot
case_fig <- case_fig %>%
layout(title = paste0(input$country,'<br>','\t','Trends'),
xaxis = list(title = 'Date',showgrid = FALSE),
yaxis = list(title = 'Comfirmed Cases/Deaths(Log Scale)',showgrid=FALSE)
)
}
return(case_fig)
})
#----------------------------------------
#tab panel 2 - Maps
data_countries <- reactive({
if(!is.null(input$choices)){
if(input$choices == "Cases"){
return(aggre_cases_copy)
}else{
return(aggre_death_copy)
}}
})
#get the largest number of count for better color assignment
maxTotal<- reactive(max(data_countries()%>%select_if(is.numeric), na.rm = T))
#color palette
pal <- reactive(colorNumeric(c("#FFFFFFFF" ,rev(inferno(256))), domain = c(0,log(binning(maxTotal())))))
output$map <- renderLeaflet({
map <-  leaflet(countries) %>%
addProviderTiles("Stadia.Outdoors", options = providerTileOptions(noWrap = TRUE)) %>%
setView(0, 30, zoom = 3) })
observe({
if(!is.null(input$date_map)){
select_date <- format.Date(input$date_map,'%Y-%m-%d')
}
if(input$choices == "Cases"){
#merge the spatial dataframe and cases dataframe
aggre_cases_join <- merge(countries,
data_countries(),
by.x = 'NAME',
by.y = 'country_names',sort = FALSE)
#pop up for polygons
country_popup <- paste0("<strong>Country: </strong>",
aggre_cases_join$NAME,
"<br><strong>",
"Total Cases: ",
aggre_cases_join[[select_date]],
"<br><strong>")
leafletProxy("map", data = aggre_cases_join)%>%
addPolygons(fillColor = pal()(log((aggre_cases_join[[select_date]])+1)),
layerId = ~NAME,
fillOpacity = 1,
color = "#BDBDC3",
weight = 1,
popup = country_popup)
} else {
#join the two dfs together
aggre_death_join<- merge(countries,
data_countries(),
by.x = 'NAME',
by.y = 'country_names',
sort = FALSE)
#pop up for polygons
country_popup <- paste0("<strong>Country: </strong>",
aggre_death_join$NAME,
"<br><strong>",
"Total Deaths: ",
aggre_death_join[[select_date]],
"<br><strong>")
leafletProxy("map", data = aggre_death_join)%>%
addPolygons(fillColor = pal()(log((aggre_death_join[[select_date]])+1)),
layerId = ~NAME,
fillOpacity = 1,
color = "#BDBDC3",
weight = 1,
popup = country_popup)
}
})
})
source("C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/global.R")
#load('./output/covid-19.RData')
source("C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/global.R")
#load('./output/covid-19.RData')
source("C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/global.R")
#load('./output/covid-19.RData')
shinyServer(function(input, output) {
#----------------------------------------
#tab panel 1 - Home Plots
#preapare data for plot
output$case_overtime <- renderPlotly({
#determin the row index for subset
req(input$log_scale)
end_date_index <- which(date_choices == input$date)
#if log scale is not enabled, we will just use cases
if (input$log_scale == FALSE) {
#render plotly figure
case_fig <- plot_ly()
#add comfirmed case lines
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~as.numeric(aggre_cases[input$country,])[1:end_date_index],
line = list(color = 'rgba(67,67,67,1)', width = 2),
name = 'Confirmed Cases')
#add death line
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~as.numeric(aggre_death[input$country,])[1:end_date_index],
name = 'Death Toll')
#set the axis for the plot
case_fig <- case_fig %>%
layout(title = paste0(input$country,'\t','Trend'),
xaxis = list(title = 'Date',showgrid = FALSE),
yaxis = list(title = 'Comfirmed Cases/Deaths',showgrid=FALSE)
)
}
#if enable log scale, we need to take log of the y values
else{
#render plotly figure
case_fig <- plot_ly()
#add comfirmed case lines
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~log(as.numeric(aggre_cases[input$country,])[1:end_date_index]),
line = list(color = 'rgba(67,67,67,1)', width = 2),
name = 'Confirmed Cases')
#add death line
case_fig <- case_fig %>% add_lines(x = ~date_choices[1:end_date_index],
y = ~log(as.numeric(aggre_death[input$country,])[1:end_date_index]),
name = 'Death Toll')
#set the axis for the plot
case_fig <- case_fig %>%
layout(title = paste0(input$country,'<br>','\t','Trends'),
xaxis = list(title = 'Date',showgrid = FALSE),
yaxis = list(title = 'Comfirmed Cases/Deaths(Log Scale)',showgrid=FALSE)
)
}
return(case_fig)
})
#----------------------------------------
#tab panel 2 - Maps
data_countries <- reactive({
if(!is.null(input$choices)){
if(input$choices == "Cases"){
return(aggre_cases_copy)
}else{
return(aggre_death_copy)
}}
})
#get the largest number of count for better color assignment
maxTotal<- reactive(max(data_countries()%>%select_if(is.numeric), na.rm = T))
#color palette
pal <- reactive(colorNumeric(c("#FFFFFFFF" ,rev(inferno(256))), domain = c(0,log(binning(maxTotal())))))
output$map <- renderLeaflet({
map <-  leaflet(countries) %>%
addProviderTiles("Stadia.Outdoors", options = providerTileOptions(noWrap = TRUE)) %>%
setView(0, 30, zoom = 3) })
observe({
if(!is.null(input$date_map)){
select_date <- format.Date(input$date_map,'%Y-%m-%d')
}
if(input$choices == "Cases"){
#merge the spatial dataframe and cases dataframe
aggre_cases_join <- merge(countries,
data_countries(),
by.x = 'NAME',
by.y = 'country_names',sort = FALSE)
#pop up for polygons
country_popup <- paste0("<strong>Country: </strong>",
aggre_cases_join$NAME,
"<br><strong>",
"Total Cases: ",
aggre_cases_join[[select_date]],
"<br><strong>")
leafletProxy("map", data = aggre_cases_join)%>%
addPolygons(fillColor = pal()(log((aggre_cases_join[[select_date]])+1)),
layerId = ~NAME,
fillOpacity = 1,
color = "#BDBDC3",
weight = 1,
popup = country_popup)
} else {
#join the two dfs together
aggre_death_join<- merge(countries,
data_countries(),
by.x = 'NAME',
by.y = 'country_names',
sort = FALSE)
#pop up for polygons
country_popup <- paste0("<strong>Country: </strong>",
aggre_death_join$NAME,
"<br><strong>",
"Total Deaths: ",
aggre_death_join[[select_date]],
"<br><strong>")
leafletProxy("map", data = aggre_death_join)%>%
addPolygons(fillColor = pal()(log((aggre_death_join[[select_date]])+1)),
layerId = ~NAME,
fillOpacity = 1,
color = "#BDBDC3",
weight = 1,
popup = country_popup)
}
})
})
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source("C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/helpers.R")
source("helpers.R")
getfwd()
getwd()
source("Applied DS/Fall2020-Project2-group2/app/helpers.R")
source("C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/helpers.R")
library(viridis)
library(dplyr)
library(tibble)
library(tidyverse)
library(shinythemes)
library(sf)
library(RCurl)
library(tmap)
library(rgdal)
library(leaflet)
library(shiny)
library(shinythemes)
library(plotly)
library(ggplot2)
shinyUI(navbarPage(title = 'COVID-19',
fluid = TRUE,
collapsible = TRUE,
#Select whichever theme works for the app
theme = shinytheme("journal"),
#--------------------------
#tab panel 1 - Home
tabPanel("Home",icon = icon("home"),
fluidPage(
fluidRow(
column(12,
h1("Global Cases overview across time"),
fluidRow(
#select the date until now
column(6,
sliderInput('date','Date Unitl:',
#first day of data recording
min = as.Date(date_choices[1]),
#present day of data recording
max = as.Date(tail(date_choices,1)),
value = as.Date(date_choices[1]),
timeFormat = "%Y-%m-%d",
animate = TRUE, step = 5),
fluidRow(
#select the country we want to see the trend
column(6,
selectInput('country','Which Country?',
choices = country_names_choices,
selected = 'United States of America')),
#select whether want case number in log-scale or not
column(6,
radioButtons("log_scale", "In Log Scale:",
choices = c(TRUE,FALSE),
selected = FALSE))
)
),
#render plotly output
column(width = 6,
plotlyOutput('case_overtime'))
)
)
)
)
),
#--------------------------
#tab panel 2 - Map
tabPanel("Maps",icon = icon("map-marker-alt"),div(class = 'outer',
leafletOutput("map", width = "100%", height = "1200"),
absolutePanel(id = "control", class = "panel panel-default", fixed = TRUE, draggable = TRUE,
top = 300, left = 20, right = "auto", bottom = "auto", width = 250, height = "auto",
selectInput('choices','Which data to visualize:',
choices = c('Cases','Death'),
selected = c('Cases')),
sliderInput('date_map','Input Date:',
#first day of data recording
min = as.Date(date_choices[1]),
#present day of data recording
max = as.Date(tail(date_choices,1)),
value = as.Date('2020-04-01','%Y-%m-%d'),
timeFormat = "%Y-%m-%d",
animate = TRUE, step = 5),
style = "opacity: 0.80"))),
# ----------------------------------
#tab panel 3 - Source
tabPanel("Data Source",icon = icon("cloud-download"),
HTML(
"<h2> Data Source : </h2>
<h4> <p><li><a href='https://coronavirus.jhu.edu/map.html'>Coronavirus COVID-19 Global Cases map Johns Hopkins University</a></li></h4>
<h4><li>COVID-19 Cases : <a href='https://github.com/CSSEGISandData/COVID-19' target='_blank'>Github Johns Hopkins University</a></li></h4>
<h4><li>Spatial Polygons : <a href='https://www.naturalearthdata.com/downloads/' target='_blank'> Natural Earth</a></li></h4>"
))
))
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app')
source("C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/helpers.R")
counties <- readRDS("C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app')
server <- function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$var)
})
}
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app')
allchanges<- read.csv("..data/OxCGRT_latest_allchanges.csv")
allchanges<- read.csv('C:\Users\Elise Nguyen\OneDrive\Documents\Applied DS\Fall2020-Project2-group2\data\OxCGRT_latest_allchanges.csv')
allchanges<- read.csv('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/data/OxCGRT_latest_allchanges.csv')
allchanges<- read.csv("..data/OxCGRT_latest_allchanges.csv")
getwd()
allchanges<- read.csv("../data/OxCGRT_latest_allchanges.csv")
datatable(sample_n(allchanges,5))
libary(DT)
library(DT)
library(data.table)
datatable(sample_n(allchanges,5))
install(data.table)
install.packages('data.table')
install.packages('data.table')
library(data.table)
allchanges<- read.csv('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/data/OxCGRT_latest_allchanges.csv')
datatable(sample_n(allchanges,5))
install.packages('DT')
library(DT)
datatable(sample_n(allchanges,5))
library(viridis)
library(dplyr)
library(tibble)
library(tidyverse)
library(shinythemes)
library(sf)
library(RCurl)
library(tmap)
library(rgdal)
library(leaflet)
library(shiny)
library(shinythemes)
library(plotly)
library(ggplot2)
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
datatable(sample_n(allchanges,5))
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip"))
devtools::install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("ggplot2")) devtools::install_github("hadley/ggplot2")
if (!require("ggmap")) devtools::install_github("dkahle/ggmap")
library(choroplethrZip)
intl_travel = allchanges%>%filter(PolicyType=='C8_International travel controls')
allchanges = allchanges%>%mutate(policy = as_factor(PolicyValue))
datatable(sample_n(allchanges,5))
datatable(sample_n(allchanges,5))
intl_travel = allchanges%>%filter(PolicyType=='C8_International travel controls')
allchanges<- read.csv('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/data/OxCGRT_latest_allchanges.csv')
#allchanges = allchanges%>%mutate(policy = as_factor(PolicyValue))
datatable(sample_n(allchanges,5))
intl_travel = allchanges%>%filter(PolicyType=='C8_International travel controls')
intl_travel = allchanges%>%filter(PolicyType=='C8_International travel controls')%>%
groupby(PolicyValue)
#allchanges<- read.csv("../data/OxCGRT_latest_allchanges.csv")
zip_choropleth(intl_travel,
title       = "International Travel policies",
legend      = "Number of sales")
intl_travel = intl_travel%>%select(PolicyValue)
head(intl_travel)
intl_travel = allchanges%>%filter(PolicyType=='C8_International travel controls')%>%groupby(PolicyValue)
head(intl_travel)
intl_travel = allchanges%>%filter(PolicyType=='C8_International travel controls')%>%group_by(PolicyValue)
head(intl_travel)
intl_travel = allchanges%>%filter(PolicyType=='C8_International travel controls')#%>%group_by(PolicyValue)
head(intl_travel)
intl_travel = allchanges%>%filter(PolicyType=='C8: International travel controls')#%>%group_by(PolicyValue)
head(intl_travel)
intl_travel = intl_travel%>%select(PolicyValue)
head(intl_travel)
intl_travel = intl_travel%>%select(CountryName, CountryCode, PolicyValue)
head(intl_travel)
intl_travel = allchanges%>%filter(PolicyType=='C8: International travel controls')#%>%group_by(PolicyValue)
head(intl_travel)
intl_travel = intl_travel%>%select(CountryCode, PolicyValue)
head(intl_travel)
zip_choropleth(intl_travel,
title       = "International Travel policies",
legend      = "Number of sales")
data(df_pop_country)
country_choropleth(df_pop_country, "2012 World Bank Populate Estimates")
shiny::runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app')
install.packages(c("maps", "mapproj"))
install.packages(c("maps", "mapproj"))
shiny::runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app')
shiny::runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app')
Rlang
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/Examples.R')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/Examples.R')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/Examples.R')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/Examples.R')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/Examples.R')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/Examples.R')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/Examples.R')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/Examples.R')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/Examples.R')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/Examples.R')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/Examples.R')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/Examples.R')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app/Examples.R')
shiny::runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2-master/Fall2020-Project2-group2-master/app')
head(aggre_cases_copy)
print(colnames(aggre_cases_copy))
print(aggre_cases_copy$country_names)
country_list <- aggre_cases_copy$country_names
print(country_list)
print(country_list)
write.table(country_list,"Countrylist.txt",sep=";")
write.csv(country_list, file = 'C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2-master/Fall2020-Project2-group2-master/app/Countrylist')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app')
runApp('C:/Users/Elise Nguyen/OneDrive/Documents/Applied DS/Fall2020-Project2-group2/app')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
View(latest_orig)
latest_orig <- merge(latest_intl_travel, latest_dom_move, by= 'CountryName',duplicateGeoms = TRUE)
latest_orig <-merge(latest_orig,latest_stayhome,by= 'CountryName',duplicateGeoms = TRUE)
latest_orig <-merge(latest_orig,latest_gathering,by= 'CountryName',duplicateGeoms = TRUE)
latest_orig <-merge(latest_orig,latest_public_transport,by= 'CountryName',duplicateGeoms = TRUE)
latest_orig%>%mutate(Selected = rep('No',length(latest_orig$CountryName)))
View(latest_orig)
Selected = rep('No',length(latest_orig$CountryName))
latest_orig<-cbind(latest_orig, Selected)
View(latest_orig)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
d<-c(1,2,3,4)
print(in_d <- 3%in%d)
d<-c(1,2,3,4)
print(in_d <- c(3,6,1,7)%in%d)
runApp()
View(latest_orig)
return(latest_orig$CountryName%in%c('Argentina', 'Afghanistan'))
print(latest_orig$CountryName%in%c('Argentina', 'Afghanistan'))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
